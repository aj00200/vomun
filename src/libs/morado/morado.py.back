import asyncore
import socket
import json

def errorfunc(*args):
    return "Function not found"

apifunctions = {}
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        try:
            return obj.__str__()
        except:
            return json.JSONEncoder.default(self, obj)

class APIHandler(asyncore.dispatcher_with_send):
    def __init__(self,sock):
        asyncore.dispatcher_with_send.__init__(self,sock)
        self.size = -1
        self.data = 0
        self.buffer = ""

    def read(self,size):
        size = int(size)
        datareturn = ""
        
        while len(datareturn) < size:
            try:
                datareturn += self.recv(4)
            except IOError:
                pass

        return datareturn

    def readable(self):
        return True     # We are always happy to read

    def writable(self):
        return len(self.buffer) > 0 # But we might not have
                                # anything to send all the time

    def handle_read(self):
        try:
            size = int(self.read(4))
            data =  self.read(size)
            retdata = self.handle_api(data)
            retjson = json.dumps(retdata,cls=ComplexEncoder)
            self.buffer += retjson

            print "api returned", retjson
        except Exception as ex:
            print "error", ex

    def handle_write(self):
        sent = self.send (self.buffer)
        self.buffer = "" # FIXME self.send Returns NONE where it should return the number of bytes sent
    
    def handle_api(self,data):


        request = json.loads(data)
        function = request["function"]
        args = request["args"]

        try:
            return apifunctions[function](*args)
        except Exception as ex:
            print ex
            return {"error": ex}



class APIServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is None:
            pass
        else:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = APIHandler(sock)

server = APIServer('localhost', 9999)
asyncore.loop()